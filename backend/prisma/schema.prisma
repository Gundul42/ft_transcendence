datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Session {
	id				String		@id
	user			AppUser?
	ip_address		String?
	created_on		DateTime	@default(now())
	state			String
	twoFA_locked	Boolean		@default(false)
}

model Token {
	access_token	String		@id
	user			AppUser?
	token_type		String
	expires_in		Int
	refresh_token	String
	scope			String
	created_at		Int
}

model AppUser {
	id				Int			@id
	sessionid		String?		@unique
	session			Session?	@relation(fields: [sessionid], references: [id])
	access_token	String		@unique
	token			Token		@relation(fields: [access_token], references: [access_token])
	email			String
	full_name		String
	display_name	String?
	avatar			String		@default("icons/42wolfsburg.jpeg")
	twoFA			Boolean		@default(false)
	twoFA_token		TwoFA?
	status			Int			@default(0)
	friends			AppUser[]	@relation("userFriend")
	symmetricfriend	AppUser[]	@relation("userFriend")
	blocked			AppUser[]	@relation("block")
	blockedBy		AppUser[]	@relation("block")
	wins			Int			@default(0)
	losses			Int			@default(0)
	ladder_level	Int			@default(0)
	matches_won		Match[]		@relation("won")
	matches_lost	Match[]		@relation("lost")
	achievements	Achieve[]
	rooms			Room[]		@relation("participate")
	adminOf			Room[]		@relation("administrate")
	penalties		Penalty[]
	messages		Message[]	@relation("message")
	requests_sent	UserRequest[]	@relation("requests sender")
	requests_rec	UserRequest[]	@relation("requests receiver")
	ownerOf			Room[]		@relation("owner")
}

model Achieve {
	id				Int			@id @default(autoincrement())
	name			String
	description		String
	logo			String
	aknowledged		Boolean		@default(false)
	userid			Int
	user			AppUser		@relation(fields: [userid], references: [id])
}

model TwoFA {
	id				String		@id
	userid			Int			@unique
	user			AppUser?	@relation(fields: [userid], references: [id])
}

model Match {
	id				String		@id
	started_at		DateTime	@default(now())
	finished_at		DateTime?
	winner_id		Int?
	loser_id		Int?
	winner			AppUser?		@relation("won", fields: [winner_id], references: [id])
	loser			AppUser?		@relation("lost", fields: [loser_id], references: [id])
}

model Room {
	id				Int			@id @default(autoincrement())
	participants	AppUser[]	@relation("participate")
	administrators	AppUser[]	@relation("administrate")
	ownerId		Int
	owner			AppUser?	@relation("owner", fields: [ownerId], references: [id])
	penalties		Penalty[]
	accessibility	Int			@default(0)
	name			String		@unique
	password		String		@default("")
	messages		Message[]	@relation("roomMsg")
}

model Message {
	id				Int			@id @default(autoincrement())
	appUserId		Int
	sender			AppUser		@relation("message", fields: [appUserId], references: [id])
	roomId			Int
	room			Room?		@relation("roomMsg", fields: [roomId], references: [id])
	value			String
	created_at		DateTime	@default(now())
}

model Penalty {
	id				Int			@id @default(autoincrement())
	type			Int
	userid			Int
	user			AppUser		@relation(fields: [userid], references: [id])
	roomid			Int
	room			Room		@relation(fields: [roomid], references: [id])
}

model UserRequest {
	id				Int			@id @default(autoincrement())
	sender_id		Int
	receiver_id		Int
	from			AppUser		@relation("requests sender", fields: [sender_id], references: [id])
	to				AppUser		@relation("requests receiver", fields: [receiver_id], references: [id])
	type			String
}
